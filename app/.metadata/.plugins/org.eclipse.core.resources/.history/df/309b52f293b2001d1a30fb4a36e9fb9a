/*
 * main.c
 *
 *  Created on: 2023楠??2�??3�??
 *      Author: LZ
 */


//gcc���у�?径瀛���娴??
#include <sys/mman.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <linux/ioctl.h>
#include <unistd.h>
#include <string.h>

//HPS�������绘�?返�ㄥ��绨崇�����炬��?�������?
#define soc_cv_av //瀵??�����╅����yclone V 缁??�?

#include "hwlib.h"
#include "socal/socal.h"
#include "socal/hps.h"
#include "hps_0.h"

#define HW_REGS_BASE (ALT_STM_OFST)     //HPS婢舵�������挎�濞����?���挎�?
#define HW_REGS_SPAN (0x04000000)		//HPS婢舵�������挎�濞���婀撮��?缁�娲�妫? 64MB婢堆���
#define HW_REGS_MASK (HW_REGS_SPAN - 1) //HPS婢舵�������挎�濞���婀撮��?�衡���?

#define AMM_WR_MAGIC 'x'
#define AMM_WR_CMD_DMA_BASE _IOR(AMM_WR_MAGIC, 0x1a, int)


#define IMG_WIDTH  400		//�ュ�у��?硅��瀹? 	RGB888
#define IMG_HEIGHT 320		//�ュ�у��?妯哄?

#define IMG_SIZE IMG_WIDTH*IMG_HEIGHT*3/4		//�惧���?����瀛�澶у�? int �? IMG_SIZE

static volatile unsigned long *cfg_virtual_base = NULL;
static volatile unsigned long *_dma_base = NULL;
static volatile unsigned long *dma_base = NULL;

int fpga_init(int *virtual_base)
{
	void *per_virtual_base;
	//unsigned long dma_base;
	int dma_fd;
	int fd;
	//1.�垫�崇�mmu

	//����婀撮��?缁�娲�妫块���茬�������ら�撮����??

	fd = open("/dev/mem",(O_RDWR|O_SYNC));
	if(fd == -1)
	{
		printf("fd = %d,ERROR:mmu open is failed\n",fd);
		return(0);
	}

	per_virtual_base = (unsigned int*)mmap(NULL,HW_REGS_SPAN,( PROT_READ | PROT_WRITE ),MAP_SHARED,fd,HW_REGS_BASE);
	printf("%x\n",per_virtual_base);

	dma_fd = open("/dev/vcam",O_RDWR);	// "/dev/amm_wr"	濞���婀����ь������娆㈤��宀�绻��??-1
	if(dma_fd == -1)
	{
		printf("ERROR:vcam open is failed\n");
		return (0);
	}

	//�惧嘲褰�buffer�ㄥ��婀撮��?
	ioctl(dma_fd,AMM_WR_CMD_DMA_BASE,&_dma_base);
	printf("_dma_base = %x\n",_dma_base);


	//���茬���恒�ュ� �电�扮安婢舵�?���恒�ュ�?  ����绶遍���款�荤���ф埂�?锝�娈����挎���?
	dma_base = (unsigned int*) mmap(NULL, HW_REGS_SPAN,
				(PROT_READ | PROT_WRITE),
				MAP_SHARED, fd, _dma_base);

	//virtual camera config bus
	cfg_virtual_base  = (per_virtual_base + ((unsigned long)(ALT_LWFPGASLVS_OFST + VCAM_0_BASE) & (unsigned long)(HW_REGS_MASK)));
	*(cfg_virtual_base+2) = _dma_base;	//����L缁���������DR3娑���uffer�╁��婀撮��?�??

	//���ょ�?�插���
	*virtual_base = per_virtual_base;
	return fd;

}

int main ()
{
	int virtual_base;
	int i;
	int fd;
	int reg_status = 0;  //read the status register through config bus.

	int *p0 = NULL,*p1 = NULL;


	fd = fpga_init(&virtual_base);
	printf("virtual_base = %x\n",virtual_base);

	*(cfg_virtual_base+1) = 0x00000000;	//娴ｈ����PL缁??
	usleep(1000);

	p0 = (int *)(dma_base + 0);
	p1 = (int *)(dma_base + IMG_SIZE);

	*(cfg_virtual_base+1) = 0x00000001;	//娴ｈ����PL缁??

	int buf0[IMG_SIZE],buf1[IMG_SIZE];

	while(1)
	{
		reg_status = *cfg_virtual_base;

		if((reg_status & 0x00000003) == 0x00000002)		//��buffer0
		{
			printf("reg_status: %x\n",reg_status);

			//��妾�buffer1
			printf("write buffer0\n");
			for(i=0;i<IMG_SIZE;i++)	//IMG_SIZE
			{
				//buf0[i] = i;

				if(i<(IMG_SIZE/4))
					buf0[i] = 0xffffffff;
				else if(i>(IMG_SIZE/4) && i < (IMG_SIZE/2))
					buf0[i] = 0x00ff00ff;
				else if(i>(IMG_SIZE/2) && i < (IMG_SIZE*3/4))
					buf0[i] = 0x00000000;
				else
					buf0[i] = 0x88888888;

			}

			memcpy(p0,buf0,IMG_SIZE*4);	//copy�版����DDR3

			printf("write data at buffer 0 done\n");
			*(cfg_virtual_base+0) = reg_status | 0x00000001;
			usleep(3000000);
		}

//		��妾�uffer0
		else if((reg_status & 0x00000003) == 0x00000001)	//��buffer1
		{
			printf("reg_status: %x\n",reg_status);

			//��妾�uffer0
			printf("write buffer1\n");
			for(i=0;i<IMG_SIZE;i++)
			{
				if(i<(IMG_SIZE/4))
					buf1[i] = 0x88888888;
				else if(i>(IMG_SIZE/4) && i < (IMG_SIZE/2))
					buf1[i] = 0x00000000;
				else if(i>(IMG_SIZE/2) && i < (IMG_SIZE*3/4))
					buf1[i] = 0x00ff00ff;
				else
					buf1[i] = 0xffffffff;

			}

			memcpy(p1,buf1,IMG_SIZE*4);	//copy�版����DDR3

			printf("write data at buffer 1 done\n");
			*(cfg_virtual_base) = reg_status | 0x00000002;//��娆���buffer0 ���х�����х�娴??
			usleep(3000000);
		}
		/*
		FILE* hlsInput = fopen("hlsInput.txt", "w+");
		fprintf(hlsInput, "=HLS input=====================================================================\r\n\n");
		for(i=0;i<IMG_SIZE;i++)
		{
			fprintf(hlsInput, "%d:%#x\r",i,dma_base[i]);
			if(IMG_SIZE%10==0)
			{
				fprintf(hlsInput, "\n");
			}
		}
		*/
		//fclose(hlsInput);
	}

	if(munmap(virtual_base,HW_REGS_SPAN) == -1)
	{
		printf("ERROR:munmap is failed\n");
		close(fd);
	}
	//���芥�?
	close(fd);
	return 0;

}




